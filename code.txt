/api/tracks/route.ts
import path from 'path';
import crypto from 'crypto';
import fs from 'fs/promises';
import * as NodeID3 from 'node-id3';

import { v4 as uuidv4 } from 'uuid';
import { NextRequest, NextResponse } from 'next/server';

async function fileHash(filePath: string): Promise<string> {
  const fileBuffer = await fs.readFile(filePath);
  const hashSum = crypto.createHash('sha256');
  hashSum.update(fileBuffer);
  return hashSum.digest('hex');
}

const coverCache: { [key: string]: string } = {};

async function getCoverFromCache(hash: string, coverFilename: string, imageBuffer: Buffer): Promise<string> {
  if (!coverCache[hash]) {
    await fs.writeFile(path.join(process.cwd(), 'public', 'covers', coverFilename), imageBuffer);
    coverCache[hash] = `/covers/${coverFilename}`;
  }
  return coverCache[hash];
}

export async function getTracks(requestedTracks?: string[]): Promise<Track[]> {
  const tracksDirectory = path.join(process.cwd(), 'public', 'tracks');

  try {
    const filenames = await fs.readdir(tracksDirectory);
    const tracksData: Track[] = [];

    // Filter filenames if requestedTracks is provided
    const filteredFilenames = requestedTracks && requestedTracks.length > 0
      ? filenames.filter(filename => requestedTracks.includes(filename))
      : filenames;

    for (const filename of filteredFilenames) {
      if (['.mp3', '.wav', '.flac', '.m4a'].includes(path.extname(filename).toLowerCase())) {
        const filePath = path.join(tracksDirectory, filename);
        const id = uuidv4();
        const fileType = path.extname(filename).toLowerCase().substring(1);
        let title = filename.replace(/\.[^.]+$/, '').replace(/_/g, ' ');
        let author: string | undefined;
        let album: string | undefined;
        let cover: string | undefined = '/default-cover.jpg';

        if (path.extname(filename).toLowerCase() === '.mp3') {
          try {
            const tags = NodeID3.read(filePath);
            if (tags) {
              title = tags.title || title;
              author = tags.artist || tags.composer;
              album = tags.album;

              // Handle cover image from ID3 tags
              if (
                tags.image &&
                typeof tags.image !== 'string' &&
                tags.image.imageBuffer
              ) {
                try {
                  const hash = await fileHash(filePath);
                  const coverFilename = `${hash}-cover.jpg`;
                  const coverPath = path.join(process.cwd(), 'public', 'covers');
                  await fs.mkdir(coverPath, { recursive: true });

                  if (!coverCache[hash]) {
                    // Save the cover to public folder for serving only if it's not in the cache
                    try {
                      cover = await getCoverFromCache(hash, coverFilename, tags.image.imageBuffer);
                    } catch (err) {
                      console.error(`Error saving cover image for ${filename}:`, err);
                      cover = `/default-cover.png`;
                    }
                  } else {
                    cover = coverCache[hash];
                  }
                } catch (err) {
                  console.error(`Error saving cover image for ${filename}:`, err);
                }
              }
            }
          } catch (error) {
            console.error(`Error reading ID3 tags from ${filename}:`, error);
          }
        }

        tracksData.push({
          id: id,
          title: title,
          author: author || 'Unknown Artist',
          album: album || 'Unknown Album',
          src: `/tracks/${filename}`,
          cover: cover,
          type: fileType,
        });
      }
    }

    return tracksData;
  } catch (error) {
    console.error("Error reading tracks directory:", error);
    return [];
  }
}

export async function GET(request: NextRequest) {
  const searchParams = request.nextUrl.searchParams;
  const requestedTracks = searchParams.getAll('tracks');

  const tracks = await getTracks(requestedTracks.length > 0 ? requestedTracks : undefined);
  return NextResponse.json(tracks);
}.

/search/page.tsx
import { Input } from "@/components/ui/input";
import { Search } from "lucide-react";

const Page = () => {
    return (
        <section className="flex flex-col items-center w-full">
            <h1 className="mt-18 text-3xl sm:text-5xl font-bold bg-gradient-to-r from-fuchsia-600 to-pink-600 bg-clip-text text-transparent">Ищите песни</h1>
            <div className="flex flex-col mt-6 w-full max-w-[600px] px-4">
                <Input placeholder="Поиск песен..." className="rounded-full py-6 w-full pl-12" />
                <div className="ml-4 -translate-y-9 text-neutral-400 w-fit">
                    <Search />
                </div>
            </div>
            
            
        </section>
    );
};

export default Page;

/layout.tsx
import { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";

import { SidebarProvider } from "@/components/ui/sidebar";
import { Bottombar } from "@/components/shared/Bottombar";
import { AppSidebar } from "@/components/shared/AppSidebar";
import { AudioProvider } from "@/components/player/AudioContext";

import "./globals.css";
import BottomPlayer from "@/components/player/BottomPlayer";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {

  return (
    <html lang="ru">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <SidebarProvider>
          <AudioProvider>
            <AppSidebar />
              {children}
            <BottomPlayer />
            <Bottombar />
          </AudioProvider>
        </SidebarProvider>
      </body>
    </html>
  );
}

/components/player/FetchTracks.tsx
// /components/shared/FetchTracks.tsx
"use client"

import Image from 'next/image';

import { memo } from 'react';
import { Play, Pause } from 'lucide-react';
import { SoundWave } from '../ui/special/SoundWave';
import { useAudio } from '@/components/player/AudioContext';

interface FetchTracksProps {
  tracks: Track[];
  isLoading: boolean;
  error: string | null;
  handleTrackSelect: (index: number) => void;
}

export const FetchTracks = memo(({
  tracks,
  isLoading,
  error,
  handleTrackSelect
}: FetchTracksProps) => {
  const { isPlaying, currentTrackIndex, tracks: currentTracks } = useAudio();

  // Check if a track is the currently playing track
  const isTrackPlaying = (track: Track) => {
    if (!isPlaying) return false;

    const currentTrack = currentTracks[currentTrackIndex];
    return currentTrack && currentTrack.id === track.id;
  };

  if (isLoading) {
    return <div className="text-start py-4">Заргужаем песни...</div>;
  }

  if (error) {
    return <div className="text-center text-red-500 py-4">{error}</div>;
  }

  if (tracks.length === 0) {
    return <div className="text-start py-4">Песни не найдены.</div>;
  }

  return (
    <div className="flex flex-row overflow-x-auto overflow-y-hidden">
      {tracks.map((track, index) => (
        <div
          key={track.id}
          className="relative flex flex-col items-start group p-4 cursor-pointer transition-colors hover:bg-white/20"
          onClick={() => handleTrackSelect(index)}
        >
          <div className="relative">
            <Image
              src={track.cover || '/default-cover.jpg'}
              alt={track.title}
              width={200}
              height={200}
              className="rounded-lg"
            />
            <div className="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-200 bg-black/20 backdrop-blur-[3px] flex items-center justify-center">
              {isTrackPlaying(track) ? (
                <Pause className="w-8 h-8 text-white" />
              ) : (
                <Play className="w-8 h-8 text-white" />
              )}
            </div>
          </div>
          <div className="mt-4">
            <h3 className="font-semibold">{track.title}</h3>
            <p className="text-sm text-gray-500">{track.author}</p>
          </div>
        </div>
      ))}
    </div>
  );
});

FetchTracks.displayName = 'FetchTracks';

/components/player/BottomPlayer.tsx
"use client"

import Image from 'next/image';
import { motion } from 'framer-motion';
import { Slider } from "@/components/ui/slider";
import { useState, useCallback, memo, useEffect } from 'react';
import {
    Volume1,
    Volume2,
    VolumeX,
    ChevronLeft,
    ChevronRight,
    Play,
    Pause,
    Maximize2,
    Minimize2,
    Loader2
} from 'lucide-react';
import { useAudio } from './AudioContext';

const BottomPlayer = () => {
    const {
        tracks,
        currentTrackIndex,
        isPlaying,
        volume,
        currentTime,
        duration,
        togglePlayPause,
        nextTrack,
        prevTrack,
        setVolume,
        seekTo,
        hasNextTrack,
        hasPrevTrack
    } = useAudio();

    const [isPlayerVisible, setIsPlayerVisible] = useState<boolean>(false);
    const [isExpanded, setIsExpanded] = useState<boolean>(false);
    const [isButtonDisabled, setIsButtonDisabled] = useState<boolean>(false);

    const currentTrack = tracks?.[currentTrackIndex];

    // Show player when there are tracks
    useEffect(() => {
        if (tracks && tracks.length > 0) {
            setIsPlayerVisible(true);
        } else {
            setIsPlayerVisible(false);
        }
    }, [tracks]);

    // Toggle play/pause with button disable safety
    const handlePlayPauseToggle = useCallback(async (e: React.MouseEvent) => {
        e.stopPropagation();

        if (isButtonDisabled) return;

        setIsButtonDisabled(true);

        try {
            await togglePlayPause();
        } catch (error) {
            console.error("Error toggling play/pause:", error);
        } finally {
            // Re-enable button after a short delay
            setTimeout(() => setIsButtonDisabled(false), 300);
        }
    }, [togglePlayPause, isButtonDisabled]);

    // Handle volume change from slider
    const handleVolumeChange = useCallback((value: number[]) => {
        setVolume(value[0] / 100);
    }, [setVolume]);

    // Handle seeking in the song
    const handleSeek = useCallback((value: number[]) => {
        const newTime = (value[0] / 100) * duration;
        seekTo(newTime);
    }, [duration, seekTo]);

    // Format time display (e.g., 01:45)
    const formatTime = useCallback((time: number): string => {
        const minutes = Math.floor(time / 60);
        const seconds = Math.floor(time % 60);
        return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
    }, []);

    // Calculate the current progress percentage
    const progressPercentage = duration > 0 ? (currentTime / duration) * 100 : 0;

    // Toggle expanded view
    const toggleExpanded = useCallback(() => {
        setIsExpanded(prev => !prev);
    }, []);

    // Handle next track click with button disable safety
    const handleNextTrack = useCallback(async (e: React.MouseEvent) => {
        e.stopPropagation();

        if (isButtonDisabled || !hasNextTrack) return;

        setIsButtonDisabled(true);

        try {
            await nextTrack();
        } catch (error) {
            console.error("Error navigating to next track:", error);
        } finally {
            // Re-enable button after a short delay
            setTimeout(() => setIsButtonDisabled(false), 300);
        }
    }, [nextTrack, hasNextTrack, isButtonDisabled]);

    // Handle previous track click with button disable safety
    const handlePrevTrack = useCallback(async (e: React.MouseEvent) => {
        e.stopPropagation();

        if (isButtonDisabled || !hasPrevTrack) return;

        setIsButtonDisabled(true);

        try {
            await prevTrack();
        } catch (error) {
            console.error("Error navigating to previous track:", error);
        } finally {
            // Re-enable button after a short delay
            setTimeout(() => setIsButtonDisabled(false), 300);
        }
    }, [prevTrack, hasPrevTrack, isButtonDisabled]);

    // Don't render anything if no tracks or player is hidden
    if (!isPlayerVisible || !tracks || tracks.length === 0 || !currentTrack) {
        return null;
    }

    return (
        <motion.footer
            className={`fixed ${isExpanded ? 'inset-0 bg-white' : 'bottom-20 sm:bottom-24 md:bottom-0 left-0 w-full'} bg-sidebar glassmorphism border-t-[1px] border-neutral-200 p-4 z-100`}
            initial={{ y: 100, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ duration: 0.5 }}
        >
            <div className={`flex items-center justify-between ${isExpanded ? 'flex-col h-full' : 'flex-col md:flex-row'} gap-4 w-full`}>
                {isExpanded && (
                    <div className="self-end">
                        <motion.button
                            className="p-2 rounded-full hover:bg-gray-100"
                            onClick={(e) => {
                                e.stopPropagation();
                                toggleExpanded();
                            }}
                            whileTap={{ scale: 0.9 }}
                        >
                            <Minimize2 />
                        </motion.button>
                    </div>
                )}

                {/* Track Info */}
                <div
                    className={`flex items-center space-x-4 flex-grow md:flex-grow-0 order-1 md:order-none ${isExpanded ? 'mt-10 flex-col justify-center space-x-0 space-y-4' : ''}`}
                    onClick={isExpanded ? undefined : toggleExpanded}
                >
                    <Image
                        src={currentTrack?.cover || '/default-cover.jpg'}
                        alt="Track Cover"
                        width={isExpanded ? 300 : 36}
                        height={isExpanded ? 300 : 36}
                        className={`rounded-sm ${isExpanded ? 'rounded-lg shadow-lg' : ''}`}
                    />
                    <div className={`${isExpanded ? 'text-center' : ''}`}>
                        <h4 className={`font-semibold ${isExpanded ? 'text-xl' : 'truncate max-w-[100px]'}`}>
                            {currentTrack?.title || "No Track"}
                        </h4>
                        <p className={`text-sm text-gray-500 ${isExpanded ? '' : 'truncate max-w-[200px] md:max-w-full'}`}>
                            {currentTrack?.author || "Unknown Artist"}
                        </p>
                    </div>
                </div>

                {/* Player Controls - Middle */}
                <div className={`flex items-center w-full space-x-6 order-2 flex-col ${isExpanded ? 'mb-12' : 'md:flex-row'} md:flex-1 justify-center`}>
                    <div className="flex flex-col items-center justify-center gap-2 w-full">
                        <div className={`flex items-center space-x-6 ${isExpanded ? 'mb-6' : 'mb-4'}`}>
                            <motion.button
                                className={`p-2 rounded-full ${hasPrevTrack && !isButtonDisabled ? 'hover:bg-gray-100' : 'opacity-50 cursor-not-allowed'}`}
                                onClick={hasPrevTrack && !isButtonDisabled ? handlePrevTrack : undefined}
                                whileTap={hasPrevTrack && !isButtonDisabled ? { scale: 0.9 } : undefined}
                                disabled={!hasPrevTrack || isButtonDisabled}
                            >
                                <ChevronLeft className={`font-thin ${isExpanded ? 'w-8 h-8' : 'w-8 h-8'}`} />
                            </motion.button>

                            <motion.button
                                className={`p-3 font-thin ${isExpanded ? 'p-5' : ''} ${isButtonDisabled ? 'opacity-50 cursor-not-allowed' : ''}`}
                                onClick={handlePlayPauseToggle}
                                whileTap={!isButtonDisabled ? { scale: 0.9 } : undefined}
                                disabled={isButtonDisabled}
                            >
                                {isButtonDisabled ? (
                                    <Loader2 className={`${isExpanded ? 'w-8 h-8' : 'w-8 h-8'} animate-spin`} />
                                ) : isPlaying ? (
                                    <Pause className={isExpanded ? 'w-8 h-8' : 'w-8 h-8'} />
                                ) : (
                                    <Play className={isExpanded ? 'w-8 h-8' : 'w-8 h-8'} />
                                )}
                            </motion.button>

                            <motion.button
                                className={`p-2 rounded-full ${hasNextTrack && !isButtonDisabled ? 'hover:bg-gray-100' : 'opacity-50 cursor-not-allowed'}`}
                                onClick={hasNextTrack && !isButtonDisabled ? handleNextTrack : undefined}
                                whileTap={hasNextTrack && !isButtonDisabled ? { scale: 0.9 } : undefined}
                                disabled={!hasNextTrack || isButtonDisabled}
                            >
                                <ChevronRight className={`font-thin ${isExpanded ? 'w-8 h-8' : 'w-8 h-8'}`} />
                            </motion.button>
                        </div>
                        {/* Song Progress Slider */}
                        <div className="flex items-center w-full max-w-[500px] px-4 space-x-2">
                            <span className="text-sm text-gray-500">{formatTime(currentTime)}</span>
                            <Slider
                                value={[progressPercentage]}
                                max={100}
                                step={0.1}
                                onValueChange={handleSeek}
                                aria-label="song progress"
                                className="flex-grow"
                                disabled={isButtonDisabled}
                            />
                            <span className="text-sm text-gray-500">{formatTime(duration || 0)}</span>
                        </div>
                    </div>
                </div>

                {/* Volume Control */}
                <div className="hidden md:flex items-center space-x-2 md:w-40 justify-end order-3">
                    {volume === 0 ? <VolumeX className='w-5 h-5' /> : volume < 0.5 ? <Volume1 className='w-5 h-5' /> : <Volume2 className='w-5 h-5' />}
                    <Slider
                        value={[volume * 100]}
                        max={100}
                        step={1}
                        onValueChange={handleVolumeChange}
                        aria-label="volume"
                        className={`${isExpanded ? 'w-full' : 'w-24'} flex-grow md:flex-grow-0`}
                    />
                    {!isExpanded && (
                            <motion.button
                                className="p-2 rounded-full hover:bg-gray-100"
                                onClick={(e) => {
                                    e.stopPropagation();
                                    toggleExpanded();
                                }}
                                whileTap={{ scale: 0.9 }}
                            >
                                <Maximize2 />
                            </motion.button>
                    )}
                </div>

            </div>
        </motion.footer>
    );
};

export default memo(BottomPlayer);

/hooks/useTracks.tsx
"use client"

import { useState, useEffect, useCallback } from "react";
import { useAudio } from "@/components/player/AudioContext";

export const useTracks = (...trackNames: string[]) => {
  const [tracks, setTracks] = useState<Track[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  const { 
    playTrackAtIndex,
    isPlaying,
    togglePlayPause,
    currentTime,
    duration
  } = useAudio();

  useEffect(() => {
    const fetchTracks = async () => {
      try {
        setIsLoading(true);

        let url = '/api/tracks';
        // If track names are provided, add them as query parameters
        if (trackNames.length > 0) {
          const queryParams = new URLSearchParams();
          trackNames.forEach(name => queryParams.append('tracks', name));
          url = `${url}?${queryParams.toString()}`;
        }

        const response = await fetch(url);

        if (!response.ok) {
          throw new Error(`Failed to fetch tracks: ${response.status} ${response.statusText}`);
        }

        const data = await response.json();

        if (Array.isArray(data) && data.length > 0) {
          setTracks(data);
        } else {
          setError('No tracks found. Please add some music files to the tracks directory.');
        }
      } catch (err) {
        console.error('Error fetching tracks:', err);
        setError(err instanceof Error ? err.message : 'Unknown error fetching tracks');
      } finally {
        setIsLoading(false);
      }
    };

    fetchTracks();
  }, [trackNames.join(',')]); // Re-fetch when track list changes

  // Handle track selection
  const handleTrackSelect = useCallback((index: number) => {
    playTrackAtIndex(index, tracks);
  }, [playTrackAtIndex, tracks]);

  return {
    tracks,
    isPlaying,
    isLoading,
    error,
    currentTime,
    duration,
    handleTrackSelect,
    handlePlayPauseToggle: togglePlayPause
  };
};

// AudioContext
// /context/AudioContext.tsx
"use client"

import React, { createContext, useContext, useState, useEffect, useCallback, useMemo, useRef } from 'react';

interface Track {
  id: string;
  title: string;
  author: string;
  src: string;
  cover?: string;
}

interface AudioContextType {
    tracks: Track[];
    currentTrackIndex: number;
    isPlaying: boolean;
    volume: number;
    currentTime: number;
    duration: number;
    playTrack: (track: Track, trackList?: Track[]) => void;
    playTrackAtIndex: (index: number, trackList: Track[]) => void;
    togglePlayPause: () => void;
    nextTrack: () => void;
    prevTrack: () => void;
    setVolume: (value: number) => void;
    seekTo: (time: number) => void;
    hasNextTrack: boolean;
    hasPrevTrack: boolean;
}

const AudioContext = createContext<AudioContextType | undefined>(undefined);

export const useAudio = () => {
    const context = useContext(AudioContext);
    if (!context) {
        throw new Error('useAudio must be used within an AudioProvider');
    }
    return context;
};

export const AudioProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
    const [tracks, setTracks] = useState<Track[]>([]);
    const [currentTrackIndex, setCurrentTrackIndex] = useState<number>(0);
    const [isPlaying, setIsPlaying] = useState<boolean>(false);
    const [volume, setVolume] = useState<number>(0.5);
    const [currentTime, setCurrentTime] = useState<number>(0);
    const [duration, setDuration] = useState<number>(0);

    const audioRef = useRef<HTMLAudioElement | null>(null);
    const savedTimeRef = useRef<number>(0);

    // Load saved state from localStorage on initial render
    useEffect(() => {
        // Only run on client side
        if (typeof window !== 'undefined') {
            try {
                const savedState = localStorage.getItem('audioPlayerState');
                if (savedState) {
                    const parsedState = JSON.parse(savedState);

                    if (parsedState.tracks && parsedState.tracks.length > 0) {
                        setTracks(parsedState.tracks);
                        setCurrentTrackIndex(parsedState.currentTrackIndex || 0);
                        setVolume(parsedState.volume || 0.5);
                        savedTimeRef.current = parsedState.currentTime || 0;
                    }
                }
            } catch (error) {
                console.error('Error loading audio state from localStorage:', error);
            }
        }
    }, []);

    // Save state to localStorage when it changes
    useEffect(() => {
        if (tracks.length > 0) {
            const stateToSave = {
                tracks,
                currentTrackIndex,
                volume,
                currentTime
            };
            localStorage.setItem('audioPlayerState', JSON.stringify(stateToSave));
        }
    }, [tracks, currentTrackIndex, volume, currentTime]);

    // Initialize audio element
    useEffect(() => {
        if (!audioRef.current) {
            audioRef.current = new Audio();
        }

        const audio = audioRef.current;

        // Set up event listeners
        const handleLoadedMetadata = () => setDuration(audio.duration || 0);
        const handleTimeUpdate = () => setCurrentTime(audio.currentTime || 0);
        const handleEnded = () => {
            if (hasNextTrack) {
                nextTrack();
            } else {
                setIsPlaying(false);
            }
        };

        audio.addEventListener('loadedmetadata', handleLoadedMetadata);
        audio.addEventListener('timeupdate', handleTimeUpdate);
        audio.addEventListener('ended', handleEnded);

        // Set volume from state
        audio.volume = volume;

        return () => {
            audio.removeEventListener('loadedmetadata', handleLoadedMetadata);
            audio.removeEventListener('timeupdate', handleTimeUpdate);
            audio.removeEventListener('ended', handleEnded);
        };
    }, []);

    // Effect for updating track source
    useEffect(() => {
        if (tracks.length > 0 && currentTrackIndex >= 0 && currentTrackIndex < tracks.length) {
            const currentTrack = tracks[currentTrackIndex];

            if (audioRef.current && currentTrack) {
                const audio = audioRef.current;

                // Save current time of previous track if it's the same track
                if (audio.src.includes(currentTrack.src)) {
                    savedTimeRef.current = audio.currentTime;
                } else {
                    savedTimeRef.current = 0;
                }

                // Update source
                audio.src = currentTrack.src;

                // After source is updated, set the saved time
                audio.addEventListener('loadedmetadata', () => {
                    audio.currentTime = savedTimeRef.current;
                    if (isPlaying) {
                        audio.play().catch(e => console.error("Play failed:", e));
                    }
                }, { once: true });
            }
        }
    }, [tracks, currentTrackIndex]);

    // Effect for play/pause
    useEffect(() => {
        if (audioRef.current && tracks.length > 0 && currentTrackIndex >= 0 && currentTrackIndex < tracks.length) {
            if (isPlaying) {
                audioRef.current.play().catch(e => console.error("Play failed:", e));
            } else {
                audioRef.current.pause();
            }
        }
    }, [isPlaying, tracks, currentTrackIndex]);

    // Effect for volume changes
    useEffect(() => {
        if (audioRef.current) {
            audioRef.current.volume = volume;
        }
    }, [volume]);

    // Calculate if there are next/previous tracks
    const hasNextTrack = useMemo(() => 
        tracks.length > 1 && currentTrackIndex < tracks.length - 1,
        [tracks, currentTrackIndex]
    );

    const hasPrevTrack = useMemo(() => 
        tracks.length > 1 && currentTrackIndex > 0,
        [tracks, currentTrackIndex]
    );

    // Play a specific track, optionally within a new track list
    const playTrack = useCallback((track: Track, trackList?: Track[]) => {
        if (trackList) {
            setTracks(trackList);
            const newIndex = trackList.findIndex(t => t.id === track.id);
            setCurrentTrackIndex(newIndex >= 0 ? newIndex : 0);
        } else {
            // If no track list is provided, create a single-item list
            setTracks([track]);
            setCurrentTrackIndex(0);
        }
        setIsPlaying(true);
    }, []);

    // Play a track at a specific index within a track list
    const playTrackAtIndex = useCallback((index: number, trackList: Track[]) => {
        setTracks(trackList);
        setCurrentTrackIndex(index);
        setIsPlaying(true);
    }, []);

    // Toggle play/pause
    const togglePlayPause = useCallback(() => {
        setIsPlaying(prev => !prev);
    }, []);

    // Next track
    const nextTrack = useCallback(() => {
        if (hasNextTrack) {
            setCurrentTrackIndex(prev => prev + 1);
            savedTimeRef.current = 0;
        }
    }, [hasNextTrack]);

    // Previous track
    const prevTrack = useCallback(() => {
        if (hasPrevTrack) {
            setCurrentTrackIndex(prev => prev - 1);
            savedTimeRef.current = 0;
        }
    }, [hasPrevTrack]);

    // Seek to a specific time
    const seekTo = useCallback((time: number) => {
        if (audioRef.current) {
            audioRef.current.currentTime = time;
            setCurrentTime(time);
        }
    }, []);

    // Memoize context value to prevent unnecessary re-renders
    const contextValue = useMemo(() => ({
        tracks,
        currentTrackIndex,
        isPlaying,
        volume,
        currentTime,
        duration,
        playTrack,
        playTrackAtIndex,
        togglePlayPause,
        nextTrack,
        prevTrack,
        setVolume,
        seekTo,
        hasNextTrack,
        hasPrevTrack
    }), [
        tracks,
        currentTrackIndex,
        isPlaying,
        volume,
        currentTime,
        duration,
        playTrack,
        playTrackAtIndex,
        togglePlayPause,
        nextTrack,
        prevTrack,
        hasNextTrack,
        hasPrevTrack
    ]);

    return (
        <AudioContext.Provider value={contextValue}>
            {children}
        </AudioContext.Provider>
    );
};