db/models/model.tracks.ts
export interface Track {
    id: string;
    title: string;
    author?: string;
    album?: string;
    src: string;
    cover?: string;
    type?: string;
}
db/models/model.user.ts
export interface User {
    id: string;
    name: string;
    likedSongs: string[]; // Array of track IDs
    playlists: Playlist[];
    onboarding: boolean;
}

export interface Playlist {
    id: string;
    name: string;
    tracks: string[]; // Array of track IDs
    createdAt: Date;
}
db/actions/action.tracks.ts
import db from '../index';
import { Track } from '../models/model.tracks';

// Fetch tracks from the API and store them in the database
export async function syncTracksFromAPI(): Promise<Track[]> {
    try {
        // Fetch tracks from the API
        const response = await fetch('/api/tracks');
        if (!response.ok) {
            throw new Error(`Failed to fetch tracks: ${response.status}`);
        }

        const tracks = await response.json();

        // Store tracks in the database
        await db.transaction('rw', db.tracks, async () => {
            // Clear existing tracks
            await db.tracks.clear();
            // Add new tracks
            await db.tracks.bulkAdd(tracks);
        });

        return tracks;
    } catch (error) {
        console.error('Error syncing tracks:', error);
        throw error;
    }
}

// Get all tracks from the database
export async function getAllTracks(): Promise<Track[]> {
    return await db.tracks.toArray();
}

// Get a track by ID
export async function getTrackById(id: string): Promise<Track | undefined> {
    return await db.tracks.get(id);
}

// Get tracks by IDs
export async function getTracksByIds(ids: string[]): Promise<Track[]> {
    return await db.tracks.where('id').anyOf(ids).toArray();
}

// Search tracks by title or author
export async function searchTracks(query: string): Promise<Track[]> {
    const lowerQuery = query.toLowerCase();

    return await db.tracks.filter((track: Track) => {
        const titleMatch = track.title.toLowerCase().includes(lowerQuery);
        const authorMatch = track.author ? track.author.toLowerCase().includes(lowerQuery) : false;

        return titleMatch || authorMatch;
    }).toArray();
}
db/actions/action.user.ts
import { v4 as uuidv4 } from 'uuid';
import db from '../index';
import { User, Playlist } from '../models/model.user';
import { Track } from '../models/model.tracks';
import { getTracksByIds } from './action.tracks';

// Get the current user (create one if it doesn't exist)
export async function getCurrentUser(): Promise<User> {
    const users = await db.users.toArray();

    if (users.length === 0) {
        // Create a default user if none exists
        const newUser: User = {
            id: uuidv4(),
            name: 'User',
            likedSongs: [],
            playlists: [],
            onboarding: false
        };

        await db.users.add(newUser);
        return newUser;
    }

    // Return the first user (we're only supporting one user in this simple app)
    return users[0];
}

// Update user name and complete onboarding
export async function completeOnboarding(name: string): Promise<User> {
    const user = await getCurrentUser();

    const updatedUser: User = {
        ...user,
        name,
        onboarding: true
    };

    await db.users.update(user.id, {
        name: updatedUser.name,
        onboarding: updatedUser.onboarding
    });
    return updatedUser;
}

// Check if user has completed onboarding
export async function hasCompletedOnboarding(): Promise<boolean> {
    const user = await getCurrentUser();
    return user.onboarding;
}

// Add a track to liked songs
export async function likeSong(trackId: string): Promise<void> {
    const user = await getCurrentUser();

    if (!user.likedSongs.includes(trackId)) {
        const updatedUser: User = {
            ...user,
            likedSongs: [...user.likedSongs, trackId]
        };

        await db.users.update(user.id, {
            likedSongs: updatedUser.likedSongs
        });
    }
}

// Remove a track from liked songs
export async function unlikeSong(trackId: string): Promise<void> {
    const user = await getCurrentUser();

    const updatedUser: User = {
        ...user,
        likedSongs: user.likedSongs.filter(id => id !== trackId)
    };

    await db.users.update(user.id, {
        likedSongs: updatedUser.likedSongs
    });
}

// Check if a song is liked
export async function isSongLiked(trackId: string): Promise<boolean> {
    const user = await getCurrentUser();
    return user.likedSongs.includes(trackId);
}

// Get all liked songs
export async function getLikedSongs(): Promise<Track[]> {
    const user = await getCurrentUser();
    return await getTracksByIds(user.likedSongs);
}

// Create a new playlist
export async function createPlaylist(name: string): Promise<Playlist> {
    const user = await getCurrentUser();

    const newPlaylist: Playlist = {
        id: uuidv4(),
        name,
        tracks: [],
        createdAt: new Date()
    };

    const updatedUser: User = {
        ...user,
        playlists: [...user.playlists, newPlaylist]
    };

    await db.users.update(user.id, {
        playlists: updatedUser.playlists
    });
    return newPlaylist;
}

// Add a track to a playlist
export async function addTrackToPlaylist(playlistId: string, trackId: string): Promise<void> {
    const user = await getCurrentUser();

    const updatedPlaylists = user.playlists.map(playlist => {
        if (playlist.id === playlistId && !playlist.tracks.includes(trackId)) {
            return {
                ...playlist,
                tracks: [...playlist.tracks, trackId]
            };
        }
        return playlist;
    });

    const updatedUser: User = {
        ...user,
        playlists: updatedPlaylists
    };

    await db.users.update(user.id, {
        playlists: updatedUser.playlists
    });
}

// Remove a track from a playlist
export async function removeTrackFromPlaylist(playlistId: string, trackId: string): Promise<void> {
    const user = await getCurrentUser();

    const updatedPlaylists = user.playlists.map(playlist => {
        if (playlist.id === playlistId) {
            return {
                ...playlist,
                tracks: playlist.tracks.filter(id => id !== trackId)
            };
        }
        return playlist;
    });

    const updatedUser: User = {
        ...user,
        playlists: updatedPlaylists
    };

    await db.users.update(user.id, {
        playlists: updatedUser.playlists
    });
}

// Delete a playlist
export async function deletePlaylist(playlistId: string): Promise<void> {
    const user = await getCurrentUser();

    const updatedUser: User = {
        ...user,
        playlists: user.playlists.filter(playlist => playlist.id !== playlistId)
    };

    await db.users.update(user.id, {
        playlists: updatedUser.playlists
    });
}

// Get a playlist by ID with its tracks
export async function getPlaylistWithTracks(playlistId: string): Promise<{ playlist: Playlist, tracks: Track[] } | null> {
    const user = await getCurrentUser();

    const playlist = user.playlists.find(p => p.id === playlistId);
    if (!playlist) return null;

    const tracks = await getTracksByIds(playlist.tracks);

    return { playlist, tracks };
}

// Get all playlists
export async function getAllPlaylists(): Promise<Playlist[]> {
    const user = await getCurrentUser();
    return user.playlists;
}
hooks/useDbInit.ts
import { useState, useEffect } from 'react';
import { syncTracksFromAPI } from '@/db/actions/action.tracks';
import { getCurrentUser } from '@/db/actions/action.user';

export function useDbInit() {
    const [isInitializing, setIsInitializing] = useState(true);
    const [error, setError] = useState<Error | null>(null);

    useEffect(() => {
        async function initializeDatabase() {
            try {
                // Initialize the user (creates one if it doesn't exist)
                await getCurrentUser();

                // Fetch tracks from API and store them in the database
                await syncTracksFromAPI();

                setIsInitializing(false);
            } catch (err) {
                console.error('Error initializing database:', err);
                setError(err instanceof Error ? err : new Error('Unknown error during database initialization'));
                setIsInitializing(false);
            }
        }

        initializeDatabase();
    }, []);

    return { isInitializing, error };
}
hooks/useMusicActions.ts
import { useState, useEffect, useCallback } from 'react';
import {
    isSongLiked,
    likeSong,
    unlikeSong,
    createPlaylist,
    addTrackToPlaylist,
    getAllPlaylists
} from '@/db/actions/action.user';
import { Playlist } from '@/db/models/model.user';

export const useMusicActions = (trackId?: string) => {
    const [isLiked, setIsLiked] = useState(false);
    const [playlists, setPlaylists] = useState<Playlist[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        async function loadData() {
            if (!trackId) {
                setIsLoading(false);
                return;
            }

            try {
                setIsLoading(true);

                // Check if song is liked
                const liked = await isSongLiked(trackId);
                setIsLiked(liked);

                // Get all playlists
                const userPlaylists = await getAllPlaylists();
                setPlaylists(userPlaylists);
            } catch (error) {
                console.error('Error loading music actions data:', error);
            } finally {
                setIsLoading(false);
            }
        }

        loadData();
    }, [trackId]);

    const toggleLike = useCallback(async () => {
        if (!trackId) return;

        try {
            if (isLiked) {
                await unlikeSong(trackId);
            } else {
                await likeSong(trackId);
            }

            setIsLiked(!isLiked);
        } catch (error) {
            console.error('Error toggling like status:', error);
        }
    }, [trackId, isLiked]);

    const addToPlaylist = useCallback(async (playlistId: string) => {
        if (!trackId) return;

        try {
            await addTrackToPlaylist(playlistId, trackId);
            return true;
        } catch (error) {
            console.error('Error adding to playlist:', error);
            return false;
        }
    }, [trackId]);

    const createNewPlaylist = useCallback(async (name: string) => {
        try {
            const newPlaylist = await createPlaylist(name);

            if (trackId) {
                await addTrackToPlaylist(newPlaylist.id, trackId);
            }

            setPlaylists(prev => [...prev, newPlaylist]);
            return newPlaylist;
        } catch (error) {
            console.error('Error creating playlist:', error);
            return null;
        }
    }, [trackId]);

    return {
        isLiked,
        playlists,
        isLoading,
        toggleLike,
        addToPlaylist,
        createNewPlaylist
    };
}
components/shared/FetchTracks.tsx
"use client"

import Image from 'next/image';

import { motion } from 'framer-motion';
import { memo, useCallback } from 'react';
import { Play, Pause, Music } from 'lucide-react';
import { useAudio } from '@/components/player/AudioContext';

interface FetchTracksProps {
  tracks: Track[];
  isLoading: boolean;
  error: string | null;
  handleTrackSelect: (index: number) => void;
  layout?: 'blocks' | 'list';
  variant?: 'flex' | 'grid';
}

export const FetchTracks = memo(({
  tracks,
  isLoading,
  error,
  handleTrackSelect,
  layout = 'blocks',
  variant = 'flex'
}: FetchTracksProps) => {
  const { isPlaying, currentTrackIndex, tracks: currentTracks } = useAudio();

  // Format time display (e.g., 01:45)
  const formatTime = useCallback((time: number): string => {
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
  }, []);

  // Check if a track is the currently playing track
  const isTrackPlaying = (track: Track) => {
    if (!isPlaying) return false;

    const currentTrack = currentTracks[currentTrackIndex];
    return currentTrack && currentTrack.id === track.id;
  };

  if (isLoading) {
    return <div className="text-start py-4">Заргужаем песни...</div>;
  }

  if (error) {
    return <div className="text-center text-red-500 py-4">{error}</div>;
  }

  if (tracks.length === 0) {
    return <div className="text-start py-4">Песни не найдены.</div>;
  }

  // Render tracks in block layout (grid or flex of cards)
  if (layout === 'blocks') {
    return (
      <div className={variant === 'grid'
        ? "grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4"
        : "flex flex-row overflow-x-auto overflow-y-hidden gap-4 w-full"
      }>
        {tracks.map((track, index) => (
          <div
            key={track.id}
            className="relative flex flex-col items-start group cursor-pointer min-w-[150px] sm:min-w-[200px]"
            onClick={() => handleTrackSelect(index)}
          >
            <div className="relative w-full">
              <Image
                src={track.cover || '/default-cover.jpg'}
                alt={track.title}
                width={200}
                height={200}
                className="rounded-lg w-full object-cover"
              />
              <div className="absolute flex items-center justify-center inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-200 bg-black/20 backdrop-blur-[3px] rounded-lg">
                {isTrackPlaying(track) ? (
                  <Pause className="w-8 h-8 text-white" />
                ) : (
                  <Play className="w-8 h-8 text-white" />
                )}
              </div>
            </div>
            <div className="mt-2 sm:mt-4 text-start w-full">
              <h3 className="font-semibold">{track.title}</h3>
              <p className="text-sm text-gray-500">{track.author}</p>
            </div>
          </div>
        ))}
      </div>
    );
  }

  // Render tracks in list layout (Spotify-like list)
  return (
    <div className="w-full border border-gray-200 rounded-md divide-y">
      {tracks.map((track, index) => (
        <div
          key={track.id}
          className={`flex items-center p-3 hover:bg-gray-50 cursor-pointer ${isTrackPlaying(track) ? 'bg-gray-50' : ''}`}
          onClick={() => handleTrackSelect(index)}
        >
          <div className="flex items-center flex-1 min-w-0">
            <div className="relative flex-shrink-0 w-12 h-12 mr-3">
              {track.cover ? (
                <Image
                  src={track.cover}
                  alt={track.title}
                  width={48}
                  height={48}
                  className="rounded object-cover"
                />
              ) : (
                <div className="flex items-center justify-center bg-gray-200 rounded w-full h-full">
                  <Music className="w-6 h-6 text-gray-500" />
                </div>
              )}
              <div className="absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100">
                {isTrackPlaying(track) ? (
                  <Pause className="w-6 h-6 text-white" />
                ) : (
                  <Play className="w-6 h-6 text-white" />
                )}
              </div>
            </div>

            <div className="min-w-0 flex-1">
              <h4 className="font-medium truncate">{track.title}</h4>
              <p className="text-sm text-gray-500 truncate">{track.author}</p>
            </div>
          </div>

          <div className="flex items-center space-x-4">
            {isTrackPlaying(track) ? (
              <span className="text-xs font-medium text-green-600 w-16 text-right">Playing</span>
            ) : (
              <span className="text-xs text-gray-500 w-16 text-right">

              </span>
            )}
          </div>
        </div>
      ))}
    </div>
  );
});
components/player/BottomPlayer.tsx
"use client"

import Image from 'next/image';

import { motion } from 'framer-motion';
import { Slider } from "@/components/ui/slider";
import { Toggle } from "@/components/ui/toggle";
import {
    Volume1,
    Volume2,
    VolumeX,
    ChevronLeft,
    ChevronRight,
    Play,
    Pause,
    Minimize2,
    Loader2,
    Repeat,
    Shuffle
} from 'lucide-react';

import {
    useState,
    useCallback,
    memo,
    useEffect
} from 'react';
import { useAudio } from './AudioContext';

const BottomPlayer = () => {
    const {
        tracks,
        currentTrackIndex,
        isPlaying,
        volume,
        currentTime,
        duration,
        togglePlayPause,
        nextTrack,
        prevTrack,
        setVolume,
        seekTo,
        hasNextTrack,
        hasPrevTrack,
        shuffleMode,
        toggleShuffleMode,
        repeatMode,
        toggleRepeatMode
    } = useAudio();

    const [isPlayerVisible, setIsPlayerVisible] = useState<boolean>(false);
    const [isExpanded, setIsExpanded] = useState<boolean>(false);
    const [isButtonDisabled, setIsButtonDisabled] = useState<boolean>(false);

    const currentTrack = tracks?.[currentTrackIndex];
    const hasShuffle = tracks && tracks.length > 1;

    // Show player when there are tracks
    useEffect(() => {
        if (tracks && tracks.length > 0) {
            setIsPlayerVisible(true);
        } else {
            setIsPlayerVisible(false);
        }
    }, [tracks]);

    // Toggle play/pause with button disable safety
    const handlePlayPauseToggle = useCallback(async (e: React.MouseEvent) => {
        e.stopPropagation();

        if (isButtonDisabled) return;

        setIsButtonDisabled(true);

        try {
            togglePlayPause();
        } catch (error) {
            console.error("Error toggling play/pause:", error);
        } finally {
            // Re-enable button after a short delay
            setTimeout(() => setIsButtonDisabled(false), 300);
        }
    }, [togglePlayPause, isButtonDisabled]);

    // Handle volume change from slider
    const handleVolumeChange = useCallback((value: number[]) => {
        setVolume(value[0] / 100);
    }, [setVolume]);

    // Handle seeking in the song
    const handleSeek = useCallback((value: number[]) => {
        const newTime = (value[0] / 100) * duration;
        seekTo(newTime);
    }, [duration, seekTo]);

    // Format time display (e.g., 01:45)
    const formatTime = useCallback((time: number): string => {
        const minutes = Math.floor(time / 60);
        const seconds = Math.floor(time % 60);
        return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
    }, []);

    // Calculate the current progress percentage
    const progressPercentage = duration > 0 ? (currentTime / duration) * 100 : 0;

    // Toggle expanded view
    const toggleExpanded = useCallback(() => {
        setIsExpanded(prev => !prev);
    }, []);

    // Handle next track click with button disable safety
    const handleNextTrack = useCallback(async (e: React.MouseEvent) => {
        e.stopPropagation();

        if (isButtonDisabled || !hasNextTrack) return;

        setIsButtonDisabled(true);

        try {
            nextTrack();
        } catch (error) {
            console.error("Error navigating to next track:", error);
        } finally {
            // Re-enable button after a short delay
            setTimeout(() => setIsButtonDisabled(false), 300);
        }
    }, [nextTrack, hasNextTrack, isButtonDisabled]);

    // Handle previous track click with button disable safety
    const handlePrevTrack = useCallback(async (e: React.MouseEvent) => {
        e.stopPropagation();

        if (isButtonDisabled || !hasPrevTrack) return;

        setIsButtonDisabled(true);

        try {
            prevTrack();
        } catch (error) {
            console.error("Error navigating to previous track:", error);
        } finally {
            // Re-enable button after a short delay
            setTimeout(() => setIsButtonDisabled(false), 300);
        }
    }, [prevTrack, hasPrevTrack, isButtonDisabled]);

    // Handle shuffle toggle
    const handleShuffleToggle = useCallback((e: React.MouseEvent) => {
        e.stopPropagation();
        if (hasShuffle) {
            toggleShuffleMode();
        }
    }, [toggleShuffleMode, hasShuffle]);

    // Handle repeat toggle
    const handleRepeatToggle = useCallback((e: React.MouseEvent) => {
        e.stopPropagation();
        toggleRepeatMode();
    }, [toggleRepeatMode]);

    // Don't render anything if no tracks or player is hidden
    if (!isPlayerVisible || !tracks || tracks.length === 0 || !currentTrack) {
        return null;
    }

    return (
        <motion.footer
            className={`fixed ${isExpanded ? 'inset-0 bg-white' : 'bottom-20 sm:bottom-24 md:bottom-0 left-0 w-full'} bg-sidebar glassmorphism border-t-[1px] border-neutral-200 p-4 z-100`}
            initial={{ y: 100, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ duration: 0.5 }}
        >
            <div className={`flex items-center justify-between ${isExpanded ? 'flex-col h-full' : 'flex-col md:flex-row'} gap-4 w-full`}>
                {isExpanded && (
                    <div className="self-end">
                        <motion.button
                            className="p-2 rounded-full hover:bg-gray-100"
                            onClick={(e) => {
                                e.stopPropagation();
                                toggleExpanded();
                            }}
                            whileTap={{ scale: 0.9 }}
                        >
                            <Minimize2 />
                        </motion.button>
                    </div>
                )}

                {/* Track Info */}
                <div
                    className={`flex items-center space-x-4 flex-grow md:flex-grow-0 order-1 md:order-none cursor-pointer ${isExpanded ? 'mt-10 flex-col justify-center space-x-0 space-y-4' : ''}`}
                    onClick={isExpanded ? undefined : toggleExpanded}
                >
                    <Image
                        src={currentTrack?.cover || '/default-cover.jpg'}
                        alt="Track Cover"
                        width={isExpanded ? 300 : 48}
                        height={isExpanded ? 300 : 48}
                        className={`rounded-sm ${isExpanded ? 'rounded-xl shadow-xl' : ''}`}
                    />
                    <div className={`${isExpanded ? 'text-center' : ''}`}>
                        <h4 className={`font-semibold ${isExpanded ? 'text-xl' : 'truncate max-w-[100px]'}`}>
                            {currentTrack?.title || "No Track"}
                        </h4>
                        <p className={`text-sm text-gray-500 ${isExpanded ? '' : 'truncate max-w-[200px] md:max-w-full'}`}>
                            {currentTrack?.author || "Unknown Artist"}
                        </p>
                    </div>
                </div>

                {/* Player Controls - Middle */}
                <div className={`flex items-center w-full space-x-6 order-2 flex-col ${isExpanded ? 'mb-12' : 'md:flex-row'} md:flex-1 justify-center`}>
                    <div className="flex flex-col items-center justify-center gap-2 w-full">
                        <div className={`flex items-center space-x-3 md:space-x-6 ${isExpanded ? 'mb-6' : 'mb-4'}`}>
                            {/* Shuffle Button */}
                            <motion.button
                                className={`p-2 rounded-full ${!hasShuffle ? 'opacity-50 cursor-not-allowed' : shuffleMode ? 'cursor-pointer text-purple-800 hover:bg-gray-100' : 'cursor-pointer hover:bg-gray-100'}`}
                                onClick={handleShuffleToggle}
                                whileTap={hasShuffle ? { scale: 0.9 } : undefined}
                                disabled={!hasShuffle}
                            >
                                <Shuffle className={`font-thin w-5 h-5`} />
                            </motion.button>

                            {/* Previous Track Button */}
                            <motion.button
                                className={`p-2 rounded-full ${hasPrevTrack && !isButtonDisabled ? 'hover:bg-gray-100 cursor-pointer' : 'opacity-50 cursor-not-allowed'}`}
                                onClick={hasPrevTrack && !isButtonDisabled ? handlePrevTrack : undefined}
                                whileTap={hasPrevTrack && !isButtonDisabled ? { scale: 0.9 } : undefined}
                                disabled={!hasPrevTrack || isButtonDisabled}
                            >
                                <ChevronLeft className={`font-thin ${isExpanded ? 'w-8 h-8' : 'w-8 h-8'}`} />
                            </motion.button>

                            {/* Play/Pause Button */}
                            <motion.button
                                className={`p-3 font-thin ${isExpanded ? 'p-5' : ''} ${isButtonDisabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}`}
                                onClick={handlePlayPauseToggle}
                                whileTap={!isButtonDisabled ? { scale: 0.9 } : undefined}
                                disabled={isButtonDisabled}
                            >
                                {isButtonDisabled ? (
                                    <Loader2 className={`${isExpanded ? 'w-8 h-8' : 'w-8 h-8'} animate-spin`} />
                                ) : isPlaying ? (
                                    <Pause className={isExpanded ? 'w-8 h-8' : 'w-8 h-8'} />
                                ) : (
                                    <Play className={isExpanded ? 'w-8 h-8' : 'w-8 h-8'} />
                                )}
                            </motion.button>

                            {/* Next Track Button */}
                            <motion.button
                                className={`p-2 rounded-full ${hasNextTrack && !isButtonDisabled ? 'hover:bg-gray-100 cursor-pointer' : 'opacity-50 cursor-not-allowed'}`}
                                onClick={hasNextTrack && !isButtonDisabled ? handleNextTrack : undefined}
                                whileTap={hasNextTrack && !isButtonDisabled ? { scale: 0.9 } : undefined}
                                disabled={!hasNextTrack || isButtonDisabled}
                            >
                                <ChevronRight className={`font-thin ${isExpanded ? 'w-8 h-8' : 'w-8 h-8'}`} />
                            </motion.button>

                            {/* Repeat Button */}
                            <motion.div whileTap={{ scale: 0.9 }}>
                                <Toggle
                                    className={`rounded-full`}
                                    pressed={repeatMode}
                                    onPressedChange={() => toggleRepeatMode()}
                                    size="lg"
                                >
                                    <Repeat className={`font-thin w-10 h-10`} />
                                </Toggle>
                            </motion.div>
                        </div>
                        {/* Song Progress Slider */}
                        <div className="flex items-center w-full max-w-[500px] space-x-2">
                            <span className="text-sm text-gray-500">{formatTime(currentTime)}</span>
                            <Slider
                                value={[progressPercentage]}
                                max={100}
                                step={0.1}
                                onValueChange={handleSeek}
                                aria-label="song progress"
                                className="flex-grow"
                                disabled={isButtonDisabled}
                            />
                            <span className="text-sm text-gray-500">{formatTime(duration || 0)}</span>
                        </div>
                    </div>
                </div>

                {/* Volume Control */}
                <div className="hidden md:flex items-center space-x-2 md:w-40 justify-end order-3">
                    {volume === 0 ? <VolumeX className='w-5 h-5' /> : volume < 0.5 ? <Volume1 className='w-5 h-5' /> : <Volume2 className='w-5 h-5' />}
                    <Slider
                        value={[volume * 100]}
                        max={100}
                        step={1}
                        onValueChange={handleVolumeChange}
                        aria-label="volume"
                        className={`${isExpanded ? 'w-full' : 'w-24'} flex-grow md:flex-grow-0`}
                    />
                </div>
            </div>
        </motion.footer>
    );
};

export default memo(BottomPlayer);